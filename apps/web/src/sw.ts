/// <reference types="vite/client" />
/// <reference types="vite-plugin-pwa/client" />

declare const self: ServiceWorkerGlobalScope & {
  __WB_MANIFEST: any;
};

import { precacheAndRoute } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate, CacheFirst } from 'workbox-strategies';
import { ExpirationPlugin } from 'workbox-expiration';

// Precache all of the assets generated by your build process.
precacheAndRoute(self.__WB_MANIFEST);

// Cache page navigations (html) with a Stale While Revalidate strategy
registerRoute(
  // Check to see if the request is a navigation to a new page
  ({ request }) => request.mode === 'navigate',
  // Use a Stale While Revalidate caching strategy
  new StaleWhileRevalidate({
    // Use a custom cache name
    cacheName: 'pages-cache',
  })
);

// Cache CSS, JS, and Web Worker requests with a Stale While Revalidate strategy
registerRoute(
  // Check to see if the request's destination is style for stylesheets, script for JavaScript, or worker for web worker
  ({ request }) =>
    request.destination === 'style' ||
    request.destination === 'script' ||
    request.destination === 'worker',
  // Use a Stale While Revalidate caching strategy
  new StaleWhileRevalidate({
    // Use a custom cache name
    cacheName: 'assets-cache',
  })
);

// Cache images with a Cache First strategy
registerRoute(
  // Check to see if the request's destination is style for an image
  ({ request }) => request.destination === 'image',
  // Use a Cache First caching strategy
  new CacheFirst({
    // Use a custom cache name
    cacheName: 'images-cache',
    plugins: [
      // Don't cache more than 50 items, and expire them after 30 days
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 Days
      }),
    ],
  })
);

// Cache API requests with a Stale While Revalidate strategy
registerRoute(
  // Check to see if the request is for an API endpoint
  ({ url }) => url.pathname.startsWith('/api/'),
  // Use a Stale While Revalidate caching strategy
  new StaleWhileRevalidate({
    // Use a custom cache name
    cacheName: 'api-cache',
  })
);
